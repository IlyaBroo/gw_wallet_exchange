// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/balance": {
            "get": {
                "description": "Позволяет пользователю получить информацию о своем балансе по всем валютам.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Получение баланса пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storages.Balance"
                        }
                    },
                    "500": {
                        "description": "Could not get balance",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deposit": {
            "post": {
                "description": "Позволяет пользователю пополнить свой счет. Проверяется корректность суммы и валюты. Обновляется баланс пользователя в базе данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Пополнение счета",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Данные для пополнения счета",
                        "name": "deposit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DepositRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DepositResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid amount or currency",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting balance from db",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/exchange": {
            "post": {
                "description": "Позволяет обменять одну валюту на другую. Проверяет наличие средств для обмена и обновляет баланс пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchange"
                ],
                "summary": "Обмен валют",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Данные для обмена валют",
                        "name": "exchange",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeForCurrencyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully exchanged currency",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeResponseForCurrency"
                        }
                    },
                    "400": {
                        "description": "Insufficient funds or invalid amount",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error exchanging currency",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rates": {
            "get": {
                "description": "Позволяет получить актуальные курсы валют из внешнего gRPC-сервиса.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchange"
                ],
                "summary": "Получение курсов валют",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "rates:",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve exchange rates",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Позволяет зарегистрировать нового пользователя. Проверяется уникальность имени пользователя и адреса электронной почты. Пароль должен быть зашифрован перед сохранением в базе данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации пользователя",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storages.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User  registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not create user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/withdraw": {
            "post": {
                "description": "Позволяет пользователю вывести средства со своего счета. Проверяется наличие достаточного количества средств и корректность суммы.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Вывод средств",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Данные для вывода средств",
                        "name": "withdraw",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawResponse"
                        }
                    },
                    "400": {
                        "description": "Insufficient funds or invalid amount",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting balance from db",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.DepositRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                }
            }
        },
        "handlers.DepositResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "new_balance": {
                    "$ref": "#/definitions/storages.Balance"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object"
        },
        "handlers.ExchangeForCurrencyReq": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "from_currency": {
                    "type": "string"
                },
                "to_currency": {
                    "type": "string"
                }
            }
        },
        "handlers.ExchangeResponse": {
            "type": "object",
            "properties": {
                "rates": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "handlers.ExchangeResponseForCurrency": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "new_balance": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "handlers.WithdrawRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                }
            }
        },
        "handlers.WithdrawResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "new_balance": {
                    "$ref": "#/definitions/storages.Balance"
                }
            }
        },
        "storages.Balance": {
            "type": "object",
            "properties": {
                "EURO": {
                    "type": "number"
                },
                "RUB": {
                    "type": "number"
                },
                "USD": {
                    "type": "number"
                }
            }
        },
        "storages.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
